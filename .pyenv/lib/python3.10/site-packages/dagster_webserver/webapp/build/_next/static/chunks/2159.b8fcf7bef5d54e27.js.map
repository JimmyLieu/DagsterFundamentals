{"version":3,"file":"static/chunks/2159.b8fcf7bef5d54e27.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/automation/AutomationAssetSelectionFragment.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTargetList.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/launchpad/useLaunchMultipleRunsWithTelemetry.ts","webpack://_N_E/../ui-core/src/schedules/ScheduleAssetSelectionsQuery.tsx","webpack://_N_E/../ui-core/src/sensors/SensorAlertDetails.oss.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/ticks/EvaluateTickButtonSensor.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/util/buildExecutionParamsList.ts"],"sourcesContent":["import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\n\nexport const AUTOMATION_ASSET_SELECTION_FRAGMENT = gql`\n  fragment AutomationAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetChecks {\n      name\n      assetKey {\n        path\n      }\n    }\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetSelectionNodeFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  fragment AssetSelectionNodeFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      automationCondition {\n        __typename\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Mono,\n  Subtitle2,\n  Tab,\n  Tabs,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  labelForAssetCheck,\n  renderItemAssetCheck,\n  renderItemAssetKey,\n  sortItemAssetCheck,\n  sortItemAssetKey,\n} from '../assets/AssetListUtils';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {AutomationAssetSelectionFragment} from './types/AutomationAssetSelectionFragment.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {\n  assetDetailsPathForAssetCheck,\n  assetDetailsPathForKey,\n} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype AutomationType = 'schedule' | SensorType;\n\nexport const AutomationTargetList = ({\n  assetSelection,\n  automationType,\n  targets,\n  repoAddress,\n}: {\n  automationType: AutomationType;\n  repoAddress: RepoAddress;\n  targets: {pipelineName: string}[] | null;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets && !assetSelection) {\n    return <span />;\n  }\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  if (assetSelection) {\n    return <AssetSelectionTag assetSelection={assetSelection} automationType={automationType} />;\n  }\n\n  if (visibleTargets?.length) {\n    return (\n      <Box flex={{direction: 'row', gap: 4}}>\n        {visibleTargets.map((target) =>\n          target.pipelineName ? (\n            <Tag icon=\"job\" tooltipText={target.pipelineName} key={target.pipelineName}>\n              <PipelineReference\n                key={target.pipelineName}\n                pipelineName={target.pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n              />\n            </Tag>\n          ) : null,\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <Tag>\n      <div style={{color: Colors.textLight()}}>None</div>\n    </Tag>\n  );\n};\n\nconst ALL_ASSETS_STRING = 'all materializable assets';\n\nconst AssetSelectionTag = ({\n  assetSelection,\n  automationType,\n}: {\n  assetSelection: AutomationAssetSelectionFragment;\n  automationType: AutomationType;\n}) => {\n  const [showDialog, setShowDialog] = useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const {checks, assets, assetsWithAMP, assetsWithoutAMP} = useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return {checks: [], assets: [], assetsWithAMP: [], assetsWithoutAMP: []};\n    }\n    const assets = assetSelection.assetsOrError.nodes;\n\n    return {\n      checks: assetSelection.assetChecks.slice().sort(sortItemAssetCheck),\n      assets: assets.map((a) => a.key).sort(sortItemAssetKey),\n      assetsWithAMP: assets\n        .filter((asset) => !!asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n      assetsWithoutAMP: assets\n        .filter((asset) => !asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n    };\n  }, [assetSelection]);\n\n  const [selectedTab, setSelectedTab] = useState('none');\n  const initialTab = checks.length && !assets.length ? 'checks' : 'assets';\n  useEffect(() => setSelectedTab(initialTab), [initialTab]);\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n  const isAllAssets = assetSelectionString === ALL_ASSETS_STRING;\n\n  if (assets.length === 1 && assets[0]) {\n    return (\n      <Tag icon=\"asset\">\n        <Link to={assetDetailsPathForKey(assets[0])}>{displayNameForAssetKey(assets[0])}</Link>\n      </Tag>\n    );\n  }\n\n  if (checks.length === 1 && checks[0]) {\n    return (\n      <Tag icon=\"asset_check\">\n        <Link to={assetDetailsPathForAssetCheck(checks[0])}>{labelForAssetCheck(checks[0])}</Link>\n      </Tag>\n    );\n  }\n\n  const splitConditioned =\n    automationType === SensorType.AUTO_MATERIALIZE || automationType === SensorType.AUTOMATION;\n\n  return (\n    <>\n      <Dialog\n        isOpen={showDialog}\n        title=\"Targeted assets\"\n        onClose={() => setShowDialog(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box\n          flex={{direction: 'column', gap: 16}}\n          padding={{horizontal: 20, vertical: 16}}\n          border=\"bottom\"\n        >\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Subtitle2>Asset selection</Subtitle2>\n            <Mono>{assetSelectionString}</Mono>\n          </Box>\n        </Box>\n\n        <Box padding={{horizontal: 20, top: 8}} border=\"bottom\">\n          <Tabs size=\"small\" selectedTabId={selectedTab}>\n            {splitConditioned ? (\n              <Tab\n                id=\"assets\"\n                title={`Assets with Automation Conditions (${assetsWithAMP.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            ) : (\n              <Tab\n                id=\"assets\"\n                title={`Assets (${assets.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            )}\n            {splitConditioned && (\n              <Tab\n                id=\"assets-without-conditions\"\n                disabled={assetsWithoutAMP.length === 0}\n                title={`Other Assets (${assetsWithoutAMP.length})`}\n                onClick={() => setSelectedTab('assets-without-conditions')}\n              />\n            )}\n            <Tab\n              id=\"checks\"\n              disabled={checks.length === 0}\n              title={`Checks ${checks.length}`}\n              onClick={() => setSelectedTab('checks')}\n            />\n          </Tabs>\n        </Box>\n        <Box flex={{direction: 'column'}} style={{maxHeight: '60vh', minHeight: '300px'}}>\n          {selectedTab === 'checks' ? (\n            <VirtualizedItemListForDialog\n              items={checks}\n              renderItem={renderItemAssetCheck}\n              itemBorders\n            />\n          ) : (\n            <VirtualizedItemListForDialog\n              items={\n                selectedTab === 'assets-without-conditions'\n                  ? assetsWithoutAMP\n                  : splitConditioned\n                    ? assetsWithAMP\n                    : assets\n              }\n              renderItem={renderItemAssetKey}\n              itemBorders\n            />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowDialog(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <Tag icon={assets.length === 1 ? 'asset' : 'asset_group'} intent={error ? 'danger' : 'none'}>\n        <ButtonLink\n          onClick={() => {\n            if (error) {\n              showCustomAlert({\n                title: 'Python error',\n                body: <PythonErrorInfo error={error} />,\n              });\n            } else {\n              setShowDialog(true);\n            }\n          }}\n          color={error ? Colors.textRed() : Colors.linkDefault()}\n        >\n          {error\n            ? 'Error loading asset selection'\n            : isAllAssets\n              ? 'All materializable assets'\n              : assetSelectionString}\n        </ButtonLink>\n      </Tag>\n    </>\n  );\n};\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {memo, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n  const showNowLine = minX < now && now < maxX;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const numTicks = Math.ceil((maxX - startTickGridX) / tickGridDelta);\n  const numLabels = Math.ceil(numTicks / 5);\n\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let ii = 0; ii < numTicks; ii++) {\n      const time = startTickGridX + ii * tickGridDelta;\n      ticks.push({\n        time,\n        x: getX(time, viewport.width, minX, fullRange),\n        showLabel: ii % numLabels === 0,\n      });\n    }\n    return ticks;\n  }, [numTicks, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, numLabels]);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>\n                    <Timestamp timestamp={{ms: tick.time}} timeFormat={{showSeconds: true}} />\n                  </Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          {showNowLine ? (\n            <NowIndicator\n              style={{\n                transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n              }}\n            />\n          ) : null}\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n\n    return (\n      <div>\n        <Caption as=\"div\">\n          <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showSeconds: true}} />\n        </Caption>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  NonIdealState,\n  Select,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport {useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick} from './util';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanizeSensorCursor} from '../sensors/SensorDetails';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickResultType, TickStatusTag} from '../ticks/TickStatusTag';\nimport {CopyIconButton} from '../ui/CopyButton';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\n\nenum TickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nconst STATUS_DISPLAY_MAP = {\n  [TickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [TickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [TickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  tickResultType,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tickResultType: TickResultType;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<TickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: TickStatusDisplay.ALL},\n  });\n\n  const [showDetailsForTick, setShowDetailsForTick] = useState<HistoryTickFragment | null>(null);\n  const [showLogsForTick, setShowLogsForTick] = useState<HistoryTickFragment | null>(null);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () => STATUS_DISPLAY_MAP[tickStatus] || STATUS_DISPLAY_MAP[TickStatusDisplay.ALL],\n    [tickStatus],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && tickStatus === TickStatusDisplay.ALL) {\n    return null;\n  }\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={tickStatus} onChange={setTickStatus} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n              <th style={{width: 80}}>Logs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                tickResultType={tickResultType}\n                instigationSelector={instigationSelector}\n                index={index}\n                onShowDetails={setShowDetailsForTick}\n                onShowLogs={setShowLogsForTick}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n      <TickDetailsDialog\n        isOpen={!!showDetailsForTick}\n        tickId={showDetailsForTick?.tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowDetailsForTick(null)}\n      />\n      <TickLogDialog\n        isOpen={!!showLogsForTick}\n        tickId={showLogsForTick?.tickId ?? null}\n        timestamp={showLogsForTick?.timestamp}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowLogsForTick(null)}\n      />\n    </>\n  );\n};\n\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: TickStatusDisplay;\n  onChange: (value: TickStatusDisplay) => void;\n}) => {\n  const items = [\n    {key: TickStatusDisplay.ALL, label: 'All ticks'},\n    {key: TickStatusDisplay.SUCCESS, label: 'Requested'},\n    {key: TickStatusDisplay.FAILED, label: 'Failed'},\n  ];\n  const activeItem = items.find(({key}) => key === status);\n  return (\n    <Select<(typeof items)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={items}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      itemListRenderer={({renderItem, filteredItems}) => {\n        const renderedItems = filteredItems.map(renderItem).filter(Boolean);\n        return <Menu>{renderedItems}</Menu>;\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  tickResultType,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n  tickResultType: TickResultType;\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<string | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => qs['tickId'] ?? undefined,\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector,\n      beforeTimestamp,\n      afterTimestamp,\n      statuses,\n      limit: beforeTimestamp ? undefined : 15,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? tick.tickId : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      if (onHighlightRunIds) {\n        onHighlightRunIds(tick.runIds);\n      }\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          tickResultType={tickResultType}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  tickResultType,\n  index,\n  onShowDetails,\n  onShowLogs,\n}: {\n  tick: HistoryTickFragment;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n  index: number;\n  onShowDetails: (tick: HistoryTickFragment) => void;\n  onShowLogs: (tick: HistoryTickFragment) => void;\n}) {\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag\n          tick={tick}\n          tickResultType={tickResultType}\n          isStuckStarted={isStuckStarted}\n        />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div\n                style={{\n                  fontFamily: FontFamily.monospace,\n                  fontSize: '14px',\n                  maxWidth: '400px',\n                  overflow: 'hidden',\n                }}\n              >\n                <MiddleTruncate text={humanizeSensorCursor(tick.cursor) || ''} />\n              </div>\n              <CopyIconButton value={tick.cursor || ''} />\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          {tickResultType === 'runs' ? (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.runIds.length === 1\n                  ? '1 run requested'\n                  : `${tick.runIds.length} runs requested`}\n              </ButtonLink>\n              {tick.runs.length === 1\n                ? tick.runs.map((run) => (\n                    <React.Fragment key={run.id}>\n                      <RunStatusLink run={run} />\n                    </React.Fragment>\n                  ))\n                : null}\n            </Box>\n          ) : (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.requestedAssetMaterializationCount === 1\n                  ? '1 materialization requested'\n                  : `${tick.requestedAssetMaterializationCount} materializations requested`}\n              </ButtonLink>\n            </Box>\n          )}\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n        </Box>\n      </td>\n      <td>\n        <Button onClick={() => onShowLogs(tick)}>View logs</Button>\n      </td>\n    </tr>\n  );\n}\n\nconst TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showLaunchError} from './showLaunchError';\nimport {useMutation} from '../apollo-client';\nimport {TelemetryAction, useTelemetryAction} from '../app/Telemetry';\nimport {\n  LAUNCH_MULTIPLE_RUNS_MUTATION,\n  LaunchBehavior,\n  handleLaunchMultipleResult,\n} from '../runs/RunUtils';\nimport {\n  LaunchMultipleRunsMutation,\n  LaunchMultipleRunsMutationVariables,\n} from '../runs/types/RunUtils.types';\n\nexport function useLaunchMultipleRunsWithTelemetry() {\n  const [launchMultipleRuns] = useMutation<\n    LaunchMultipleRunsMutation,\n    LaunchMultipleRunsMutationVariables\n  >(LAUNCH_MULTIPLE_RUNS_MUTATION);\n\n  const logTelemetry = useTelemetryAction();\n  const history = useHistory();\n\n  return useCallback(\n    async (variables: LaunchMultipleRunsMutationVariables, behavior: LaunchBehavior) => {\n      try {\n        const executionParamsList = Array.isArray(variables.executionParamsList)\n          ? variables.executionParamsList\n          : [variables.executionParamsList];\n\n        const jobNames = executionParamsList.map(\n          (params) => params.selector.jobName || params.selector.pipelineName,\n        );\n\n        if (\n          jobNames.length !== executionParamsList.length ||\n          jobNames.includes(undefined) ||\n          jobNames.includes(null)\n        ) {\n          throw new Error(\n            'Error: Invalid job names. Each RunRequest must specify a job name to launch all runs',\n          );\n        }\n\n        const metadata: {[key: string]: string | string[] | null | undefined} = {\n          jobNames: jobNames.filter((name): name is string => name !== undefined),\n          opSelection: undefined,\n        };\n\n        const result = (await launchMultipleRuns({variables})).data?.launchMultipleRuns;\n        if (result) {\n          handleLaunchMultipleResult(result, history, {behavior});\n          logTelemetry(\n            TelemetryAction.LAUNCH_MULTIPLE_RUNS,\n            metadata as {[key: string]: string | string[] | null | undefined},\n          );\n        }\n\n        return result;\n      } catch (error) {\n        console.error('error', error);\n        showLaunchError(error as Error);\n      }\n      return undefined;\n    },\n    [history, launchMultipleRuns, logTelemetry],\n  );\n}\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\n\nexport const SCHEDULE_ASSET_SELECTIONS_QUERY = gql`\n  query ScheduleAssetSelectionQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {RepoAddress} from '../workspace/types';\n\nexport interface Props {\n  repoAddress: RepoAddress;\n  sensorName: string;\n}\n\nexport const SensorAlertDetails = (_props: Props) => null;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {useMutation} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip\n      content={<div style={{maxWidth: '500px', wordBreak: 'break-word'}}>{tooltipContent}</div>}\n      display=\"flex\"\n    >\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  NonIdealStateWrapper,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {gql, useMutation} from '../apollo-client';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {useTrackEvent} from '../app/analytics';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {DELETE_DYNAMIC_PARTITIONS_MUTATION} from '../assets/DeleteDynamicPartitionsDialog';\nimport {\n  DeleteDynamicPartitionsMutation,\n  DeleteDynamicPartitionsMutationVariables,\n} from '../assets/types/DeleteDynamicPartitionsDialog.types';\nimport {DynamicPartitionsRequestType, SensorSelector} from '../graphql/types';\nimport {useLaunchMultipleRunsWithTelemetry} from '../launchpad/useLaunchMultipleRunsWithTelemetry';\nimport {CREATE_PARTITION_MUTATION} from '../partitions/CreatePartitionDialog';\nimport {\n  AddDynamicPartitionMutation,\n  AddDynamicPartitionMutationVariables,\n} from '../partitions/types/CreatePartitionDialog.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {buildExecutionParamsListSensor} from '../util/buildExecutionParamsList';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorDryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"preview_tick\"\n      title={`Preview tick result for ${name}`}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const trackEvent = useTrackEvent();\n\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n  const [createPartition] = useMutation<\n    AddDynamicPartitionMutation,\n    AddDynamicPartitionMutationVariables\n  >(CREATE_PARTITION_MUTATION);\n  const [deletePartition] = useMutation<\n    DeleteDynamicPartitionsMutation,\n    DeleteDynamicPartitionsMutationVariables\n  >(DELETE_DYNAMIC_PARTITIONS_MUTATION);\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [launching, setLaunching] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] =\n    useState<SensorDryRunInstigationTick | null>(null);\n\n  const sensorSelector: SensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n  const executionParamsList = useMemo(\n    () =>\n      sensorExecutionData && sensorSelector\n        ? buildExecutionParamsListSensor(sensorExecutionData, sensorSelector, jobName)\n        : [],\n    [sensorSelector, sensorExecutionData, jobName],\n  );\n  const dynamicPartitionRequests = sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const onCommitTickResult = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      return;\n    }\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const launchMultipleRunsWithTelemetry = useLaunchMultipleRunsWithTelemetry();\n\n  const canApply = useMemo(() => {\n    return (\n      (executionParamsList != null && executionParamsList.length > 0) ||\n      (dynamicPartitionRequests?.length || 0) > 0\n    );\n  }, [executionParamsList, dynamicPartitionRequests]);\n\n  const onApply = useCallback(async () => {\n    if (!canApply) {\n      return;\n    }\n\n    trackEvent('launch-all-sensor');\n    setLaunching(true);\n\n    try {\n      if (dynamicPartitionRequests?.length) {\n        await Promise.all(\n          dynamicPartitionRequests.map(async (request) => {\n            if (request.type === DynamicPartitionsRequestType.ADD_PARTITIONS) {\n              await Promise.all(\n                (request.partitionKeys || []).map(async (partitionKey) => {\n                  await createPartition({\n                    variables: {\n                      repositorySelector: {\n                        repositoryName: repoAddress.name,\n                        repositoryLocationName: repoAddress.location,\n                      },\n                      partitionsDefName: request.partitionsDefName,\n                      partitionKey,\n                    },\n                  });\n                }),\n              );\n            } else if (request.partitionKeys && request.partitionKeys.length) {\n              await deletePartition({\n                variables: {\n                  repositorySelector: {\n                    repositoryName: repoAddress.name,\n                    repositoryLocationName: repoAddress.location,\n                  },\n                  partitionsDefName: request.partitionsDefName,\n                  partitionKeys: request.partitionKeys,\n                },\n              });\n            }\n          }),\n        );\n      }\n      if (executionParamsList) {\n        await launchMultipleRunsWithTelemetry({executionParamsList}, 'toast');\n      }\n      onCommitTickResult(); // persist tick\n    } catch (e) {\n      console.error(e);\n    }\n\n    setLaunching(false);\n    onClose();\n  }, [\n    canApply,\n    createPartition,\n    deletePartition,\n    dynamicPartitionRequests,\n    executionParamsList,\n    launchMultipleRunsWithTelemetry,\n    onClose,\n    onCommitTickResult,\n    repoAddress,\n    trackEvent,\n  ]);\n\n  const leftButtons = useMemo(() => {\n    if (launching) {\n      return null;\n    }\n\n    if (sensorExecutionData || error) {\n      return (\n        <Button\n          icon={<Icon name=\"settings_backup_restore\" />}\n          data-testid={testId('try-again')}\n          onClick={() => {\n            setSensorExecutionData(null);\n            setError(null);\n          }}\n        >\n          Try again\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  }, [launching, sensorExecutionData, error]);\n\n  const rightButtons = useMemo(() => {\n    if (launching) {\n      return <Box flex={{direction: 'row', gap: 8}}></Box>;\n    }\n\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n\n      if (error) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n          </Box>\n        );\n      } else if (didSkip) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n\n            <Tooltip content=\"Commits tick result\" placement=\"top-end\">\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                onClick={onCommitTickResult}\n                data-testid={testId('commit-tick-result')}\n              >\n                <div>Commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      } else {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n            <Tooltip\n              canShow={!canApply || launching}\n              content=\"Applies requests, launches all runs, and commits tick result\"\n              placement=\"top-end\"\n            >\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                disabled={!canApply || launching}\n                onClick={onApply}\n                data-testid={testId('launch-all')}\n              >\n                <div>Apply requests & commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      }\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('continue')}>\n            Continue\n          </Button>\n        </Box>\n      );\n    }\n  }, [\n    launching,\n    sensorExecutionData,\n    error,\n    submitting,\n    onClose,\n    onCommitTickResult,\n    canApply,\n    onApply,\n    submitTest,\n  ]);\n\n  const content = useMemo(() => {\n    if (launching) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Launching runs</div>\n        </Box>\n      );\n    }\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Grid>\n            <div>\n              <Subheading>Result</Subheading>\n              <Box flex={{grow: 1, alignItems: 'center'}}>\n                <div>\n                  {error ? (\n                    <Tag intent=\"danger\">Failed</Tag>\n                  ) : numRunRequests ? (\n                    <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                  ) : (\n                    <Tag intent=\"warning\">Skipped</Tag>\n                  )}\n                </div>\n              </Box>\n            </div>\n            <div>\n              <Subheading>Used cursor value</Subheading>\n              <pre>{cursor?.length ? cursor : 'None'}</pre>\n            </div>\n          </Grid>\n          <Box>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading style={{marginBottom: 8}}>Requested runs (0)</Subheading>\n                <div>\n                  <SkipReasonNonIdealStateWrapper>\n                    <NonIdealState\n                      icon=\"missing\"\n                      title=\"No runs requested\"\n                      description={\n                        <>\n                          <span>\n                            The sensor function was successfully evaluated but didn&apos;t return\n                            any run requests.\n                          </span>\n                          <span>\n                            <br />\n                            Skip reason:{' '}\n                            {sensorExecutionData?.evaluationResult?.skipReason\n                              ? `\"${sensorExecutionData.evaluationResult.skipReason}\"`\n                              : 'No skip reason was output'}\n                          </span>\n                        </>\n                      }\n                    />\n                  </SkipReasonNonIdealStateWrapper>\n                </div>\n              </Box>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading>Requested runs ({numRunRequests})</Subheading>\n                <RunRequestTable\n                  runRequests={runRequests}\n                  name={name}\n                  jobName={jobName}\n                  isJob={true}\n                  repoAddress={repoAddress}\n                />\n              </Box>\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n\n          <ComputedCursorGrid>\n            <Subheading>Computed cursor value</Subheading>\n            <pre>\n              {sensorExecutionData?.evaluationResult?.cursor?.length\n                ? sensorExecutionData?.evaluationResult.cursor\n                : error\n                  ? 'Error'\n                  : 'None'}\n            </pre>\n          </ComputedCursorGrid>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor value (optional)</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n            placeholder=\"Enter a cursor value\"\n          />\n          <div>\n            A cursor tracks where a sensor left off, allowing the sensor to efficiently process new\n            changes or events without missing anything or duplicating work. The cursor is typically\n            a string, and can be updated within the sensor&apos;s logic to reflect the latest state.\n          </div>\n          <div>\n            <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n              Learn more\n            </a>{' '}\n            about cursors\n          </div>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, launching, name, jobName, repoAddress, cursor]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder left={leftButtons}>\n        {rightButtons}\n      </DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst ComputedCursorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  padding-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst SkipReasonNonIdealStateWrapper = styled.div`\n  ${NonIdealStateWrapper} {\n    margin: auto !important;\n    width: unset !important;\n    max-width: unset !important;\n  }\n`;\n","import {Box, Button, Icon, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {SensorDryRunDialog} from './SensorDryRunDialog';\nimport {SensorType} from '../graphql/types';\nimport {RepoAddress} from '../workspace/types';\n\ninterface EvaluateTickButtonSensorProps {\n  cursor: string;\n  name: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  sensorType: SensorType;\n}\n\nexport const EvaluateTickButtonSensor = ({\n  cursor,\n  name,\n  repoAddress,\n  jobName,\n  sensorType,\n}: EvaluateTickButtonSensorProps) => {\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Tooltip\n        canShow={sensorType !== SensorType.STANDARD}\n        content=\"Testing not available for this sensor type\"\n        placement=\"top-end\"\n      >\n        <Button\n          disabled={sensorType !== SensorType.STANDARD}\n          onClick={() => setShowTestTickDialog(true)}\n          icon={<Icon name=\"preview_tick\" />}\n        >\n          Preview tick result\n        </Button>\n      </Tooltip>\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => setShowTestTickDialog(false)}\n        currentCursor={cursor}\n        name={name}\n        repoAddress={repoAddress}\n        jobName={jobName}\n      />\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FontFamily,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {SensorAlertDetails} from 'shared/sensors/SensorAlertDetails.oss';\nimport styled from 'styled-components';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {EvaluateTickButtonSensor} from '../ticks/EvaluateTickButtonSensor';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {AutomationAssetSelectionFragment} from '../automation/types/AutomationAssetSelectionFragment.types';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\n/** Some cursors are persisted Python tuples, which come through as JSON. Examples:\n * {\"__class__\": \"AirflowPollingSensorCursor\", \"dag_query_offset\": 0, \"end_date_gte\": 1743134332.087687, \"end_date_lte\": null}\n * {\"__class__\": \"RunStatusSensorCursor\", \"record_id\": 1234, \"update_timestamp\": \"1743134332.087687\", \"record_timestamp\": null}\n *\n * For these, there are often empty / unused fields and we can pull just the cursor fields that are in use\n * into a compact table-ready presentation:\n *\n * end_date_gte=1743134332.087687\n */\nexport const humanizeSensorCursor = (cursor: string | false | null) => {\n  if (cursor && cursor.startsWith('{\"__class__\"')) {\n    const cursorObj = JSON.parse(cursor);\n    delete cursorObj['__class__'];\n    return Object.entries(cursorObj)\n      .filter((pair) => pair[1] !== null && pair[1] !== 0)\n      .map(([k, v]) => `${k}=${v}`)\n      .join(',');\n  }\n  return cursor;\n};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  assetSelection,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const {\n    permissions,\n    disabledReasons,\n    loading: loadingPermissions,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {canUpdateSensorCursor} = permissions;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Heading style={{display: 'flex', flexDirection: 'row', gap: 4}}>\n            <Link to=\"/automation\">Automation</Link>\n            <span>/</span>\n            {name}\n          </Heading>\n        }\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <EvaluateTickButtonSensor\n              cursor={cursor || ''}\n              name={sensor.name}\n              repoAddress={repoAddress}\n              jobName={sensor.targets?.[0]?.pipelineName || ''}\n              sensorType={sensor.sensorType}\n            />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} tickResultType=\"runs\" />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || assetSelection ? (\n            <tr>\n              <td>Target</td>\n              <TargetCell>\n                <AutomationTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  assetSelection={assetSelection || null}\n                  automationType={sensor.sensorType}\n                />\n              </TargetCell>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? humanizeSensorCursor(cursor) : 'None'}\n                  </span>\n                  <Tooltip\n                    canShow={!canUpdateSensorCursor}\n                    content={disabledReasons.canUpdateSensorCursor}\n                  >\n                    <Button\n                      icon={<Icon name=\"edit\" />}\n                      disabled={!canUpdateSensorCursor || loadingPermissions}\n                      onClick={() => setCursorEditing(true)}\n                    >\n                      {cursor !== humanizeSensorCursor(cursor) ? 'View Raw / Edit' : 'Edit'}\n                    </Button>\n                  </Tooltip>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n          <SensorAlertDetails repoAddress={repoAddress} sensorName={name} />\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n\nconst TargetCell = styled.td`\n  button {\n    line-height: 20px;\n  }\n`;\n","import {gql} from '../apollo-client';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {CursorHistoryControls} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {gql} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  highlightedIds,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PreviousRunsForSensorQuery,\n    PreviousRunsForSensorQueryVariables\n  >({\n    query: PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    variables: {\n      filter: {\n        tags: [\n          {key: DagsterTag.SensorName, value: sensor.name},\n          {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n        ],\n      },\n    },\n    nextCursorForResult: (data) => {\n      if (data.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return data.pipelineRunsOrError.results[RUNS_LIMIT - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (data?.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    pageSize: RUNS_LIMIT,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, !paginationProps.hasPrevCursor ? 10000 : 60 * 60 * 1000);\n\n  let data = queryResult.data;\n\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    // Use previous data to stop the screen from flashing while we wait for the next data to load\n    data = queryResult.previousData;\n  }\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data.pipelineRunsOrError.results;\n  return (\n    <>\n      <RunTable\n        actionBarComponents={tabs}\n        runs={runs}\n        highlightedIds={highlightedIds}\n        hideCreatedBy={true}\n      />\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n  const assetSelection =\n    selectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? selectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  const isAutomationSensor =\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION;\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  const tickResultType: TickResultType = isAutomationSensor ? 'materializations' : 'runs';\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        assetSelection={assetSelection || null}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline\n        tickResultType={tickResultType}\n        repoAddress={repoAddress}\n        name={sensorOrError.name}\n        {...variables}\n      />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            tickResultType={tickResultType}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Icon, Table, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {RunConfigDialog} from '../runs/RunConfigDialog';\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n  const [selectedRequest, setSelectedRequest] = useState<RunRequestFragment | null>(null);\n  const [visibleDialog, setVisibleDialog] = useState<'config' | null>(null);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td style={{verticalAlign: 'middle'}}>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td style={{width: '7.5%', verticalAlign: 'middle', textAlign: 'center'}}>\n              <PreviewButton\n                request={request}\n                onClick={() => {\n                  setSelectedRequest(request);\n                  setVisibleDialog('config');\n                }}\n              />\n            </td>\n          </tr>\n        );\n      })}\n      {selectedRequest && (\n        <RunConfigDialog\n          isOpen={visibleDialog === 'config'}\n          onClose={() => setVisibleDialog(null)}\n          mode={mode || null}\n          runConfigYaml={selectedRequest.runConfigYaml}\n          tags={selectedRequest.tags}\n          isJob={isJob}\n          jobName={jobName}\n          request={selectedRequest}\n          repoAddress={repoAddress}\n        />\n      )}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>Target</th>\n            <th style={{width: '7.5%'}}>Actions</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\nfunction PreviewButton({request, onClick}: {request: RunRequestFragment; onClick: () => void}) {\n  return (\n    <Tooltip content=\"Preview run config and tags\" placement=\"left-start\">\n      <Button\n        icon={<Icon name=\"data_object\" />}\n        onClick={onClick}\n        data-testid={testId(`preview-${request.runKey || ''}`)}\n      />\n    </Tooltip>\n  );\n}\n","import {gql} from '../apollo-client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {ExecutionParams, ScheduleSelector, SensorSelector} from '../graphql/types';\nimport {sanitizeConfigYamlString} from '../launchpad/yamlUtils';\nimport {ScheduleDryRunInstigationTick} from '../ticks/EvaluateScheduleDialog';\nimport {SensorDryRunInstigationTick} from '../ticks/SensorDryRunDialog';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSensor = (\n  sensorExecutionData: SensorDryRunInstigationTick,\n  sensorSelector: SensorSelector,\n  jobName: string,\n) => {\n  if (!sensorExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  sensorExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = sensorSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSchedule = (\n  scheduleExecutionData: ScheduleDryRunInstigationTick,\n  scheduleSelector: ScheduleSelector,\n  jobName: string,\n) => {\n  if (!scheduleExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  scheduleExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = scheduleSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n"],"names":["AUTOMATION_ASSET_SELECTION_FRAGMENT","gql","PYTHON_ERROR_FRAGMENT","AutomationTargetList","assetSelection","automationType","targets","repoAddress","param","repo","useRepository","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","span","visibleTargets","filter","isHiddenAssetGroupJob","target","pipelineName","AssetSelectionTag","length","Box","flex","direction","gap","map","Tag","icon","tooltipText","PipelineReference","pipelineHrefContext","isJob","isThisThingAJob","div","style","color","Colors","showDialog","setShowDialog","useState","error","assetsOrError","__typename","checks","assets","assetsWithAMP","assetsWithoutAMP","useMemo","nodes","assetChecks","slice","sort","sortItemAssetCheck","a","key","sortItemAssetKey","asset","definition","automationCondition","selectedTab","setSelectedTab","initialTab","useEffect","assetSelectionString","isAllAssets","Link","to","assetDetailsPathForKey","displayNameForAssetKey","assetDetailsPathForAssetCheck","labelForAssetCheck","splitConditioned","SensorType","AUTO_MATERIALIZE","AUTOMATION","jsxs","Fragment","Dialog","isOpen","title","onClose","width","maxWidth","minWidth","canOutsideClickClose","canEscapeKeyClose","padding","horizontal","vertical","border","Subtitle2","Mono","top","Tabs","size","selectedTabId","Tab","id","concat","onClick","disabled","maxHeight","minHeight","VirtualizedItemListForDialog","items","renderItem","renderItemAssetCheck","itemBorders","renderItemAssetKey","DialogFooter","topBorder","Button","intent","ButtonLink","showCustomAlert","body","PythonErrorInfo","dayjs","relativeTime","COLOR_MAP","InstigationTickStatus","SUCCESS","FAILURE","STARTED","SKIPPED","HoverColorMap","LiveTickTimeline","ticks","tickResultType","onHoverTick","onSelectTick","exactRange","timeRange","MINUTE","tickGrid","timeAfter","now","setNow","Date","isPaused","setPaused","interval","setInterval","clearInterval","maxX","minX","showNowLine","fullRange","viewport","containerProps","useViewport","ticksReversed","tick","endTimestamp","reverse","ticksToDisplay","i","timestamp","startX","viewportWidth","endX","isStuckStartedTick","Math","max","tickGridDelta","timeTickGridDelta","startTickGridX","ceil","numTicks","numLabels","gridTicks","ii","time","push","x","showLabel","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","Caption","Timestamp","ms","timeFormat","showSeconds","count","runIds","requestedAssetMaterializationCount","Tick","status","onMouseEnter","onMouseLeave","Tooltip","content","TickTooltip","height","NowIndicator","TimeAxisWrapper","memo","ifPlural","runs","startTime","endTime","elapsedTime","as","unix","styled","withConfig","TickStatusDisplay","Chart","register","zoomPlugin","STATUS_DISPLAY_MAP","TicksTable","queryResult","showLogsForTick","name","tabs","setTimerange","setParentStatuses","tickStatus","setTickStatus","useQueryPersistedState","queryKey","defaults","showDetailsForTick","setShowDetailsForTick","setShowLogsForTick","instigationSelector","repoAddressToSelector","statuses","React","paginationProps","useCursorPaginatedQuery","nextCursorForResult","data","instigationStateOrError","PAGE_SIZE","getResultArray","variables","query","TICK_HISTORY_QUERY","pageSize","useQueryRefreshAtInterval","FIFTEEN_SECONDS","state","hasPrevCursor","start","end","undefined","Array","from","loading","reset","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Spinner","purpose","justifyContent","NonIdealState","instigationType","alignItems","StatusFilter","onChange","TableWrapper","thead","tr","th","InstigationType","SENSOR","tbody","index","TickRow","onShowDetails","onShowLogs","marginTop","CursorHistoryControls","TickDetailsDialog","tickId","TickLogDialog","label","activeItem","find","Select","popoverProps","position","filterable","itemRenderer","item","props","MenuItem","active","modifiers","handleClick","text","itemListRenderer","filteredItems","renderedItems","Boolean","Menu","onItemSelect","rightIcon","Icon","display","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","encode","decode","qs","pollingPaused","pausePolling","useQuery","limit","notifyOnNetworkStatusChange","Subheading","onTickClick","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","isStuckStarted","td","TimestampDisplay","showTimezone","TickStatusTag","TimeElapsed","startUnix","endUnix","cursor","fontFamily","FontFamily","monospace","fontSize","overflow","MiddleTruncate","humanizeSensorCursor","CopyIconButton","value","RunStatusLink","run","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","Table","THREE_DAYS","type","reduce","sum","request","partitionKeys","useLaunchMultipleRunsWithTelemetry","launchMultipleRuns","useMutation","LAUNCH_MULTIPLE_RUNS_MUTATION","logTelemetry","useTelemetryAction","history","useHistory","useCallback","behavior","_data","executionParamsList","isArray","jobNames","params","selector","jobName","includes","metadata","opSelection","result","handleLaunchMultipleResult","TelemetryAction","LAUNCH_MULTIPLE_RUNS","console","showLaunchError","SCHEDULE_ASSET_SELECTIONS_QUERY","SensorAlertDetails","SensorMonitoredAssets","assetKeys","jsx_runtime","AssetLink","path","join","SensorResetButton","sensor","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","location","sensorSelector","sensorName","resetSensor","toggleOnInFlight","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","wordBreak","DynamicPartitionRequests","includeTitle","rows","forEach","partitionsDefName","def","grow","borderRight","SensorDryRunDialog","SensorDryRun","sensorExecutionData","currentCursor","trackEvent","useTrackEvent","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursorMutation","SET_CURSOR_MUTATION","createPartition","CREATE_PARTITION_MUTATION","deletePartition","DELETE_DYNAMIC_PARTITIONS_MUTATION","setCursor","submitting","setSubmitting","launching","setLaunching","setError","setSensorExecutionData","repositoryLocationName","repositoryName","buildExecutionParamsListSensor","dynamicPartitionRequests","evaluationResult","dynamicPartitionsRequests","submitTest","selectorData","assertUnreachable","onCommitTickResult","setSensorCursor","showSharedToaster","message","Group","spacing","underline","launchMultipleRunsWithTelemetry","canApply","onApply","Promise","all","partitionKey","repositorySelector","e","leftButtons","data-testid","testId","rightButtons","runRequests","numRunRequests","didSkip","placement","canShow","Grid","pre","marginBottom","SkipReasonNonIdealStateWrapper","description","br","skipReason","RunRequestTable","ComputedCursorGrid","TextInput","placeholder","href","DialogBody","left","RUN_REQUEST_FRAGMENT","NonIdealStateWrapper","EvaluateTickButtonSensor","sensorType","showTestTickDialog","setShowTestTickDialog","STANDARD","TIME_FORMAT","startsWith","cursorObj","JSON","parse","Object","entries","pair","k","v","humanizeSensorInterval","minIntervalSeconds","SensorDetails","daemonHealth","refreshState","sensorState","disabledReasons","loadingPermissions","canUpdateSensorCursor","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","running","InstigationStatus","RUNNING","PageHeader","Heading","flexDirection","tags","RepositoryLink","right","margin","QueryRefreshCountdown","MetadataTableWIP","nextTick","TargetCell","SensorSwitch","canReset","EditCursorDialog","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","SensorInfo","sensorDaemonStatus","assetDaemonStatus","boxProps","warnForSensor","healthy","required","warnForAssets","Alert","rel","SensorPreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SENSOR_QUERY","DagsterTag","SensorName","RepositoryLabelTag","repoAddressAsTag","pipelineRunsOrError","results","RUNS_LIMIT","previousData","RunTable","actionBarComponents","hideCreatedBy","paddingBottom","RUN_TABLE_RUN_FRAGMENT","SensorRoot","selectionQueryResult","useTrackPageView","useParams","useDocumentTitle","setStatuses","view","raw","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","useMergedRefresh","ButtonGroup","activeItems","Set","buttons","sensorOrError","Redirect","instance","isAutomationSensor","Page","INSTANCE_HEALTH_FRAGMENT","mode","selectedRequest","setSelectedRequest","visibleDialog","setVisibleDialog","runKey","verticalAlign","showIcon","textAlign","PreviewButton","RunConfigDialog","runConfigYaml","tableLayout","QueryfulTickLogsTable","background","zIndex","TICK_LOG_EVENTS_QUERY","events","logEvents","SpinnerWithText","InstigationEventLogTable","instigationLoggingDocsUrl","action","ExternalAnchorButton","INSTIGATION_EVENT_LOG_FRAGMENT","showErrors","setShowErrors","tag","requestedItem","BaseTag","fillColor","runKeys","targetTagName","successTag","YAML_SYNTAX_INVALID","onlyKeyAndValue","configYamlOrEmpty","sanitizeConfigYamlString","yaml","executionParams","runConfigData","assetCheckSelection","solidSelection","executionMetadata","buildExecutionParamsListSchedule","scheduleExecutionData","scheduleSelector"],"sourceRoot":""}